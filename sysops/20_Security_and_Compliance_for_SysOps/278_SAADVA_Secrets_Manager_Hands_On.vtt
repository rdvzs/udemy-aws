WEBVTT

0
00:00.270 --> 00:04.670
So now let's look into a service called Secrets manager. 

1
00:04.920 --> 00:11.980
And the name is extremely obvious for one of the services that will be easily storing secrets into us.

2
00:12.030 --> 00:15.870
And so with this you can rotate then manage them and you retrieve them.

3
00:16.080 --> 00:18.000
And with API calls for their lifecycle.

4
00:18.420 --> 00:24.630
So the big difference of secrets manager you'll have with something like payment a store with an encrypted

5
00:24.960 --> 00:31.140
value like a secure string is that with secrets manager you can set up some rotation and you can link

6
00:31.140 --> 00:35.930
it to a lambda function that will allow you to rotate your credentials on top of it.

7
00:35.940 --> 00:43.290
It has a very tight integration with RDX or postgres and so on and so the idea is that it will be a

8
00:43.290 --> 00:47.150
little bit more easy to use and more secure with this.

9
00:47.160 --> 00:52.860
But the idea is the same you're going to store secrets into a store and retrieve them at runtime.

10
00:52.860 --> 00:59.550
So the pricing is that you have 40 cents per secrets per month and five cents for 10000 API calls and

11
00:59.550 --> 01:03.410
you get a 30 day free trial available for the secret spending.

12
01:03.440 --> 01:04.060
OK.

13
01:04.230 --> 01:10.120
So it's all obviously managed by I am for access to the do the secret.

14
01:10.150 --> 01:12.510
So this is kind of like a similar thing to private restore.

15
01:13.080 --> 01:18.270
So let's go ahead and store and your secrets and so as you can see we get different type of secrets

16
01:18.270 --> 01:23.380
and I'm pretty sure they will add secrets over time to make this even more integrated with other AWOL

17
01:23.400 --> 01:24.190
services.

18
01:24.210 --> 01:30.600
But we can do a credential for an audience database a credential for if cluster for a document DB database

19
01:30.840 --> 01:33.960
for an other database or an other type of secrets.

20
01:33.960 --> 01:35.520
And this is for example an API key.

21
01:36.210 --> 01:38.090
So here this is really important.

22
01:38.160 --> 01:42.780
Whenever you have a database it will prompt you would like a user name and a password and pretty much

23
01:42.790 --> 01:44.530
using her and password for everything here.

24
01:44.590 --> 01:50.220
OK but if it's an other type of secrets then you will have key value pairs that you can place and you

25
01:50.220 --> 01:57.210
will have secrets placed in here so you can set for example API key and then you would have the secret

26
01:57.210 --> 02:00.180
value of the API key.

27
02:00.330 --> 02:00.680
Right.

28
02:00.720 --> 02:02.430
And this would be the your key value pair.

29
02:02.460 --> 02:05.640
But you could have multiple ones you can just store not just one API key.

30
02:05.640 --> 02:12.410
You could store for example secrets key for the API and you have a second value.

31
02:12.490 --> 02:13.580
Second secret value.

32
02:13.590 --> 02:13.860
Right.

33
02:14.250 --> 02:16.850
So you really free you have many as many key value pairs.

34
02:16.860 --> 02:21.480
And that's also a little bit of a difference versus versus something like the payment a store.

35
02:21.480 --> 02:25.860
So you can do this in secret or you can also do it in plaintext in your basement.

36
02:25.930 --> 02:29.070
Jason So this is would be a way to copy and paste.

37
02:29.070 --> 02:34.620
Jason if you prefer this to entering things manually in this UI then you select the encryption key.

38
02:35.010 --> 02:38.580
So do you want a default encryption key or do you want to use a claim as could you have created and

39
02:38.580 --> 02:44.460
so on to encrypt these secrets so I'll use my Kaminsky for example and then I'll click on next.

40
02:44.460 --> 02:53.010
Then you need to give it your secret a name so I'll call it proud prod my secret API and then you can

41
02:53.010 --> 02:58.530
have a description and you can have tags and then you click on next and then here we can configure automatic

42
02:58.680 --> 03:00.470
or not automatic rotation.

43
03:00.480 --> 03:06.270
So that means that if you have automated or mimic rotation automatically your secrets will be rotated.

44
03:06.270 --> 03:11.880
And so that means that for example here I can say every 60 days I want you to rotate my secret.

45
03:11.880 --> 03:15.330
You can have a custom value if you want it to the max being 1 year.

46
03:15.450 --> 03:19.980
And so that means that after 60 days there will be a lended function that will be invoked.

47
03:19.980 --> 03:26.160
And so you need to create that line the function and that lambda function needs to have the role to

48
03:26.160 --> 03:27.280
rotate that secrets.

49
03:27.330 --> 03:33.300
So that means for example generating a new user name or refreshing the API key credentials with a third

50
03:33.300 --> 03:33.900
party.

51
03:33.900 --> 03:36.350
And so you're free to do whatever you want with your lambda functions.

52
03:36.420 --> 03:42.900
But the idea is that after 60 days it will be invoked automatically by secrets manager to rotate the

53
03:42.900 --> 03:48.210
secret the secrets we have just stored and that makes it a really powerful secret management solution.

54
03:48.690 --> 03:52.440
So right now disable the automatic rotation and click on Next.

55
03:52.440 --> 03:58.110
And so we're good to go and we can have simple code in any of our languages that we commonly used to

56
03:58.110 --> 04:00.150
retrieve that secrets for example with Python.

57
04:00.270 --> 04:05.490
If we look at it there is a get secret function and you pass in the secret name the region name and

58
04:05.490 --> 04:12.180
then you just initiate a client to do API calls and then to get the value you do clients that get secret

59
04:12.180 --> 04:16.950
value you put in this you pass in the secret IP which is a secret name and then you get the response

60
04:17.280 --> 04:22.230
and in the response then you can just look at the keys that you need for example in the key value pair

61
04:22.230 --> 04:28.260
we had and here secret string is the value of the key you want to retrieve and that's it's very very

62
04:28.260 --> 04:31.050
fairly simple and you have this for the language you are.

63
04:31.050 --> 04:34.690
So if you're more of a good person here's go JavaScript Java and so on.

64
04:34.730 --> 04:35.350
OK.

65
04:35.460 --> 04:39.540
And that's as easy as it is to use the secrets manager.

66
04:39.570 --> 04:42.650
And so this is just a normal key value pair of secrets.

67
04:42.670 --> 04:44.990
And let me just show you how to do our guest database.

68
04:45.090 --> 04:50.550
So I'll call this admin and then super secret password and then we would encrypt those as well.

69
04:51.180 --> 04:56.940
And similarly you can also link this to an RDX database that the secret will access.

70
04:56.940 --> 05:03.270
So the idea is that with these special integration with RDX or redshift or document dv you would have

71
05:03.270 --> 05:06.120
to select a database to integrate this with.

72
05:06.120 --> 05:10.980
So that makes it a little bit more powerful because now the secret's manager will hold the value of

73
05:10.980 --> 05:12.720
the username and password.

74
05:12.750 --> 05:18.720
But on top of it it will also set these values on the linked RDX database automatically.

75
05:18.720 --> 05:23.910
And you can also enable rotation as well to make sure that the secret rotates every so often.

76
05:23.910 --> 05:27.870
So this one it's just to show you this but you are not going to create an audience database just for

77
05:27.870 --> 05:31.460
the sake of linking the secrets to it but you get the idea.

78
05:31.530 --> 05:34.450
So that's it's in a nutshell for secrets manager.

79
05:34.650 --> 05:39.330
When you're done you can just delete that secrets and you'll be good to go and you can have a waiting

80
05:39.330 --> 05:44.550
period as well just to make sure that it doesn't get updated deleted hastily.

81
05:44.580 --> 05:45.920
So that's it for this lecture.

82
05:45.930 --> 05:46.610
I hope you liked it.

83
05:46.710 --> 05:48.180
And then we'll see you in the next lecture.
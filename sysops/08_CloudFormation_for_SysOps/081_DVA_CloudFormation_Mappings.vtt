WEBVTT

1
00:00:00.240 --> 00:00:01.410
<v Instructor>So now let's talk about</v>

2
00:00:01.410 --> 00:00:03.540
mappings in CloudFormation.

3
00:00:03.540 --> 00:00:05.190
So mappings are fixed variables

4
00:00:05.190 --> 00:00:07.470
within your CloudFormation templates,

5
00:00:07.470 --> 00:00:10.290
and they're very handy if you want to differentiate

6
00:00:10.290 --> 00:00:11.400
between different environments.

7
00:00:11.400 --> 00:00:12.870
For example, dev versus prod,

8
00:00:12.870 --> 00:00:14.700
and give different values for those,

9
00:00:14.700 --> 00:00:18.360
or regions, such as AWS regions or AMI types and so on.

10
00:00:18.360 --> 00:00:21.270
So all the values that are possible are hardcoded

11
00:00:21.270 --> 00:00:24.480
within the template and here is the format of mappings.

12
00:00:24.480 --> 00:00:26.520
But to make it a bit more concrete,

13
00:00:26.520 --> 00:00:28.320
I'm going to show you a region map.

14
00:00:28.320 --> 00:00:31.800
So here, based on the region you have, so us-east-1,

15
00:00:31.800 --> 00:00:35.700
us-west-1, or eu-west-1, and based on the architecture

16
00:00:35.700 --> 00:00:40.020
you're using, for example, HVM64 or HVMG2,

17
00:00:40.020 --> 00:00:43.500
this is going to give you a different AMI ID every time.

18
00:00:43.500 --> 00:00:46.770
Well, we know that the AMIs are specific

19
00:00:46.770 --> 00:00:48.840
based on the region, so of course it makes sense

20
00:00:48.840 --> 00:00:50.670
to have a different AMI per region.

21
00:00:50.670 --> 00:00:53.670
So it's a great candidate for a mapping.

22
00:00:53.670 --> 00:00:56.910
Now to access the mapping values, here is an example.

23
00:00:56.910 --> 00:01:01.650
So we have an EC2 instance that is using an ImageId.

24
00:01:01.650 --> 00:01:05.880
And this ImageId is using the FindInMap function.

25
00:01:05.880 --> 00:01:08.310
And to use this FindInMap function,

26
00:01:08.310 --> 00:01:10.350
we first need to use a map name.

27
00:01:10.350 --> 00:01:12.720
So here we have the RegionMap.

28
00:01:12.720 --> 00:01:14.760
Then we have the top level key.

29
00:01:14.760 --> 00:01:16.710
So what we want to use in here,

30
00:01:16.710 --> 00:01:20.280
we have a reference to the pseudo parameter AWS::Region.

31
00:01:20.280 --> 00:01:23.370
So if you launch this template in us-east-1,

32
00:01:23.370 --> 00:01:24.990
it's going to be us-east-1,

33
00:01:24.990 --> 00:01:26.760
and if you launch it to us-west-1,

34
00:01:26.760 --> 00:01:29.280
automatically this pseudo parameter

35
00:01:29.280 --> 00:01:32.310
is going to resolve to us-west-1.

36
00:01:32.310 --> 00:01:34.560
And then finally, the type of architecture you want,

37
00:01:34.560 --> 00:01:37.410
for example, HVM64.

38
00:01:37.410 --> 00:01:39.510
And this works great because, well,

39
00:01:39.510 --> 00:01:40.980
AMIs are region specific,

40
00:01:40.980 --> 00:01:43.200
and so you want to make sure you have the right AMI

41
00:01:43.200 --> 00:01:46.140
for the right region and the right architecture.

42
00:01:46.140 --> 00:01:48.570
So when do you use mappings versus parameters?

43
00:01:48.570 --> 00:01:50.880
Well, the mappings are great when you know in advance

44
00:01:50.880 --> 00:01:53.070
all the values that can be taken

45
00:01:53.070 --> 00:01:55.290
and that they can be deduced from variables

46
00:01:55.290 --> 00:01:59.820
such as the region, the availability zone, the AWS account,

47
00:01:59.820 --> 00:02:02.850
the environment, dev versus prod, et cetera, et cetera.

48
00:02:02.850 --> 00:02:05.520
They allow you safer control over the templates.

49
00:02:05.520 --> 00:02:08.550
But if you have values that really depend

50
00:02:08.550 --> 00:02:10.170
on what the user wants

51
00:02:10.170 --> 00:02:12.270
and what they're thinking about at runtime,

52
00:02:12.270 --> 00:02:13.260
then you want parameters

53
00:02:13.260 --> 00:02:16.800
to give the user a maximum amount of freedom.

54
00:02:16.800 --> 00:02:17.970
So that's it for mappings.

55
00:02:17.970 --> 00:02:21.213
I hope you liked it and I will see you in the next lecture.


WEBVTT

1
00:00:00.850 --> 00:00:03.550
<v Lecturer>Okay, so one last quick bit of information</v>

2
00:00:03.550 --> 00:00:05.170
regarding Aurora for your SysOps exam.

3
00:00:05.170 --> 00:00:08.340
So you can associate a priority tier between zero and 15

4
00:00:08.340 --> 00:00:09.990
on each Read Replica.

5
00:00:09.990 --> 00:00:10.851
And this has helped

6
00:00:10.851 --> 00:00:14.349
in case you want to control the failover priority.

7
00:00:14.349 --> 00:00:16.630
So RDS will promote a Read Replica

8
00:00:16.630 --> 00:00:18.120
with the highest priority,

9
00:00:18.120 --> 00:00:19.410
so the lowest tier.

10
00:00:19.410 --> 00:00:21.771
And if two replicas have the same priority,

11
00:00:21.771 --> 00:00:25.781
then Aurora will promote the largest in size.

12
00:00:25.781 --> 00:00:28.101
And if they have the same priority and the same size,

13
00:00:28.101 --> 00:00:31.540
then it will promote a replica at randomly.

14
00:00:31.540 --> 00:00:32.530
And when that thinks,

15
00:00:32.530 --> 00:00:34.650
you can migrate an RDS MySQL snapshot

16
00:00:34.650 --> 00:00:36.480
to to an Aurora MySQL Cluster,

17
00:00:36.480 --> 00:00:38.619
which is a way for RDS to help you

18
00:00:38.619 --> 00:00:43.619
move up to Aurora to use this new service.

19
00:00:43.790 --> 00:00:46.480
The other thing is around CloudWatch metrics for Aurora.

20
00:00:46.480 --> 00:00:48.820
So you have a trick called the AuroraReplicaLag,

21
00:00:48.820 --> 00:00:49.780
which is the amount of lag

22
00:00:49.780 --> 00:00:52.980
when replicating updates from the primary instance.

23
00:00:52.980 --> 00:00:54.580
So if you ever look at this diagram,

24
00:00:54.580 --> 00:00:56.900
as you write data into you Aurora cluster,

25
00:00:56.900 --> 00:00:58.480
it's going to be replicated.

26
00:00:58.480 --> 00:01:01.048
And so then it could be a lag associated with that.

27
00:01:01.048 --> 00:01:03.139
So the AuroraReplicaLagMaximum

28
00:01:03.139 --> 00:01:04.750
is the maximum amount of lag

29
00:01:04.750 --> 00:01:07.139
across all database instances in the cluster.

30
00:01:07.139 --> 00:01:09.170
And the Minimum is the minimum amount of lag

31
00:01:09.170 --> 00:01:11.771
across all database instances in the cluster.

32
00:01:11.771 --> 00:01:13.459
Now if your replica lag is high,

33
00:01:13.459 --> 00:01:15.930
that means that the users will have a different experience

34
00:01:15.930 --> 00:01:19.020
based on the replica from which they get the data from

35
00:01:19.020 --> 00:01:21.240
because of this eventual consistency.

36
00:01:21.240 --> 00:01:22.280
That means for example,

37
00:01:22.280 --> 00:01:26.149
a user, if it writes data in as an item into a cart,

38
00:01:26.149 --> 00:01:28.149
and then refreshes the cart,

39
00:01:28.149 --> 00:01:30.149
maybe the cart will miss the item,

40
00:01:30.149 --> 00:01:31.940
which is not a great experience,

41
00:01:31.940 --> 00:01:34.490
but this is due to the eventual consistency.

42
00:01:34.490 --> 00:01:38.437
So another type of metric to look at is DatabaseConnections,

43
00:01:38.437 --> 00:01:40.730
which is the current number of connections

44
00:01:40.730 --> 00:01:42.180
to database instance.

45
00:01:42.180 --> 00:01:43.560
And the InsertLatency,

46
00:01:43.560 --> 00:01:46.739
which is the average duration of insert operations.

47
00:01:46.739 --> 00:01:47.869
So that's it for Aurora.

48
00:01:47.869 --> 00:01:48.950
I hope you liked it.

49
00:01:48.950 --> 00:01:50.900
And I will see you in the next lecture.


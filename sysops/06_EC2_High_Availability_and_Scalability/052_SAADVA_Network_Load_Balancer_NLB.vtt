WEBVTT

1
00:00:00.240 --> 00:00:01.440
<v Instructor>So now let's talk about</v>

2
00:00:01.440 --> 00:00:03.600
the network load balancer.

3
00:00:03.600 --> 00:00:05.580
So it's a Layer 4 load balancer

4
00:00:05.580 --> 00:00:07.260
and therefore it allows you to deal

5
00:00:07.260 --> 00:00:10.890
with TCP and UDP traffic.

6
00:00:10.890 --> 00:00:14.010
This is lower level, Layer 7 was HTTP

7
00:00:14.010 --> 00:00:17.760
and Layer 4 is going to be TCP and UDP traffic.

8
00:00:17.760 --> 00:00:21.090
So these work for the network load balancer

9
00:00:21.090 --> 00:00:24.480
and therefore when in the exam you see UDP

10
00:00:24.480 --> 00:00:27.000
think network load balancer or even TCP.

11
00:00:27.000 --> 00:00:29.550
Okay, also on top of it,

12
00:00:29.550 --> 00:00:33.240
the network load balancer is really, really high performance

13
00:00:33.240 --> 00:00:37.020
and therefore it can handle millions of requests per seconds

14
00:00:37.020 --> 00:00:39.630
and it has ultra low latency.

15
00:00:39.630 --> 00:00:43.620
Now, another specificity of the network load balancer

16
00:00:43.620 --> 00:00:48.150
is that it only has one static IP per availability zones

17
00:00:48.150 --> 00:00:52.590
and you can assign an elastic IP to each AZ.

18
00:00:52.590 --> 00:00:54.090
So this is very helpful when you need

19
00:00:54.090 --> 00:00:58.890
to expose your application with a set of static IPs.

20
00:00:58.890 --> 00:01:00.930
And this can be elastic IPs.

21
00:01:00.930 --> 00:01:01.920
So when the exam you say,

22
00:01:01.920 --> 00:01:04.770
Hey, your application can only be accessed within

23
00:01:04.770 --> 00:01:06.870
one, two, or three different IPs,

24
00:01:06.870 --> 00:01:10.290
then you need to think about the network load balancer

25
00:01:10.290 --> 00:01:11.790
as an option.

26
00:01:11.790 --> 00:01:15.690
So if you see extreme performance TCP or UDP

27
00:01:15.690 --> 00:01:19.440
or static IPs, think network balancer.

28
00:01:19.440 --> 00:01:20.850
So let's have a look at how that works.

29
00:01:20.850 --> 00:01:25.500
So it works very similarly to the application balancer.

30
00:01:25.500 --> 00:01:27.510
We create target groups

31
00:01:27.510 --> 00:01:31.560
and then the network balancer will redirect to them.

32
00:01:31.560 --> 00:01:36.120
So we can use for example, the TCP traffic

33
00:01:36.120 --> 00:01:38.640
or for example, in the backend, the GTP,

34
00:01:38.640 --> 00:01:40.623
but still in the front end use TCP.

35
00:01:42.270 --> 00:01:44.130
So what about the target groups?

36
00:01:44.130 --> 00:01:45.810
This is the important part.

37
00:01:45.810 --> 00:01:48.750
So the target groups can be EC2 instances.

38
00:01:48.750 --> 00:01:50.940
That means that your network load balancer

39
00:01:50.940 --> 00:01:53.520
can redirect to your EC2 instances

40
00:01:53.520 --> 00:01:56.820
and send TCP or UDP traffic to them.

41
00:01:56.820 --> 00:01:59.520
But you can also register IP addresses

42
00:01:59.520 --> 00:02:01.950
and these IP addresses when they're hard coded

43
00:02:01.950 --> 00:02:03.300
and they must be hard coded,

44
00:02:03.300 --> 00:02:05.250
they must be private IPs.

45
00:02:05.250 --> 00:02:06.180
So why would you do this?

46
00:02:06.180 --> 00:02:09.630
Well, you can of course send the private IP

47
00:02:09.630 --> 00:02:12.060
of the EC2 instance that you own,

48
00:02:12.060 --> 00:02:15.330
but also you could use the private IP of a server

49
00:02:15.330 --> 00:02:17.310
that you have in your own data center

50
00:02:17.310 --> 00:02:20.070
and therefore both of them can be fronted

51
00:02:20.070 --> 00:02:22.383
by the same network load balancer.

52
00:02:23.310 --> 00:02:24.870
And it's also possible for you

53
00:02:24.870 --> 00:02:26.220
to have a network load balancer

54
00:02:26.220 --> 00:02:29.370
in front of an application load balancer.

55
00:02:29.370 --> 00:02:33.480
So in that case, the NLB is in front of your ALB.

56
00:02:33.480 --> 00:02:35.160
So why would you do this?

57
00:02:35.160 --> 00:02:37.380
Well, thanks to the network load balancer

58
00:02:37.380 --> 00:02:40.740
you would get, for example, the fixed IP addresses,

59
00:02:40.740 --> 00:02:43.320
and then thanks to the application load balancer,

60
00:02:43.320 --> 00:02:45.450
you can get all the rules that you have

61
00:02:45.450 --> 00:02:48.300
around the handling HTTP type of traffic.

62
00:02:48.300 --> 00:02:50.610
So it is a valid combination.

63
00:02:50.610 --> 00:02:52.440
Now one last thing you need to know for the exam

64
00:02:52.440 --> 00:02:54.960
is that the health checks performed

65
00:02:54.960 --> 00:02:57.780
by the network load balancer target groups

66
00:02:57.780 --> 00:03:01.230
are support three different kind of protocols.

67
00:03:01.230 --> 00:03:05.490
They support the TCP protocol, the HTTP protocol

68
00:03:05.490 --> 00:03:07.920
and the HTTPS protocol.

69
00:03:07.920 --> 00:03:11.370
So if your backend application supports the HTTP

70
00:03:11.370 --> 00:03:14.460
or HTTPS protocol, then it is definitely possible for you

71
00:03:14.460 --> 00:03:18.363
to define a health check on these protocols.

72
00:03:19.320 --> 00:03:21.210
So that's it for the network load balancer.

73
00:03:21.210 --> 00:03:24.160
I hope you liked it and I will see you in the next lecture.


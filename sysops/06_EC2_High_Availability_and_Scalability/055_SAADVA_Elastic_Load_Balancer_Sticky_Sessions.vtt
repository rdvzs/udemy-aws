WEBVTT

1
00:00:00.150 --> 00:00:01.710
<v Instructor>Let's talk about sticky sessions</v>

2
00:00:01.710 --> 00:00:03.420
or so-called session affinity

3
00:00:03.420 --> 00:00:06.180
for your elastic load balancer.

4
00:00:06.180 --> 00:00:07.380
So it's possible to implement

5
00:00:07.380 --> 00:00:09.420
what's called stickiness or sticky sessions.

6
00:00:09.420 --> 00:00:11.010
And the idea is that the client

7
00:00:11.010 --> 00:00:14.670
doing two requests to the load balancer

8
00:00:14.670 --> 00:00:17.460
will have the same instance in the backend

9
00:00:17.460 --> 00:00:18.600
to respond to the request.

10
00:00:18.600 --> 00:00:20.558
So the idea is that, for example, you have the ALB

11
00:00:20.558 --> 00:00:23.610
with two EC2 instances and you have three clients.

12
00:00:23.610 --> 00:00:25.350
If the client one makes a request

13
00:00:25.350 --> 00:00:27.630
and it goes to the first EC2 instance,

14
00:00:27.630 --> 00:00:30.060
that means that when it does a second request

15
00:00:30.060 --> 00:00:33.390
to the load balancer, it will go to the same instance,

16
00:00:33.390 --> 00:00:34.950
which is a different behavior

17
00:00:34.950 --> 00:00:37.200
where usually the application balancer

18
00:00:37.200 --> 00:00:39.990
will do a spread of all the requests

19
00:00:39.990 --> 00:00:42.300
across all the EC2 instances.

20
00:00:42.300 --> 00:00:44.700
Now for client two, if it goes to the ALB

21
00:00:44.700 --> 00:00:46.020
and talks to the second instance,

22
00:00:46.020 --> 00:00:47.790
then all the requests will go there.

23
00:00:47.790 --> 00:00:49.800
And same for client three, okay?

24
00:00:49.800 --> 00:00:52.110
So this can be enabled for the Classic Load Balancer

25
00:00:52.110 --> 00:00:54.663
Application Balancer and Network Load Balancer.

26
00:00:55.530 --> 00:00:58.020
And how it works, well, there is a cookie

27
00:00:58.020 --> 00:00:59.610
that is sent as part of the request

28
00:00:59.610 --> 00:01:01.920
from the clients to the load balancer

29
00:01:01.920 --> 00:01:04.830
and it has stickiness and it has an expiration date.

30
00:01:04.830 --> 00:01:06.480
That means that when the cookie expires,

31
00:01:06.480 --> 00:01:10.470
then the client may be redirected to another EC2 instance.

32
00:01:10.470 --> 00:01:12.030
The use case for this is to make sure

33
00:01:12.030 --> 00:01:14.880
that the user is connected to the same backend instance

34
00:01:14.880 --> 00:01:17.640
in order not to lose his session data,

35
00:01:17.640 --> 00:01:19.470
which can take some important information

36
00:01:19.470 --> 00:01:22.260
such as the login of the user, for example.

37
00:01:22.260 --> 00:01:23.610
But if you enable stickiness,

38
00:01:23.610 --> 00:01:25.410
it may bring imbalance to the load

39
00:01:25.410 --> 00:01:26.820
over the backend EC2 instances

40
00:01:26.820 --> 00:01:31.260
in case some instances I have a very, very sticky user.

41
00:01:31.260 --> 00:01:33.660
Okay, now to go a little bit deeper,

42
00:01:33.660 --> 00:01:35.310
how about the cookie itself?

43
00:01:35.310 --> 00:01:37.380
Well, there are two types of cookie

44
00:01:37.380 --> 00:01:39.060
that you can have for sticky sessions.

45
00:01:39.060 --> 00:01:40.770
The first one is application-based cookie

46
00:01:40.770 --> 00:01:43.770
and the second one is duration-based cookie.

47
00:01:43.770 --> 00:01:45.510
So for application-based cookies,

48
00:01:45.510 --> 00:01:48.495
well, it's a custom cookie that is generated by the target,

49
00:01:48.495 --> 00:01:50.430
so by your application itself.

50
00:01:50.430 --> 00:01:53.340
And you can include any custom attributes you want

51
00:01:53.340 --> 00:01:54.870
required by your application.

52
00:01:54.870 --> 00:01:57.390
The cookie name must be specified individually

53
00:01:57.390 --> 00:01:59.910
for each target group, okay?

54
00:01:59.910 --> 00:02:03.600
And you may not, you must not use the following names,

55
00:02:03.600 --> 00:02:08.490
so AWSALB, AWSALBAPPOR or AWSALBTG,

56
00:02:08.490 --> 00:02:12.180
because they are already reserved for use by the ELB itself.

57
00:02:12.180 --> 00:02:14.340
Or it could be an application cookie.

58
00:02:14.340 --> 00:02:18.360
And this time will be generated by the load balancer itself,

59
00:02:18.360 --> 00:02:23.360
and the cookie name used by the ALB will be AWSALBAPP, okay?

60
00:02:23.940 --> 00:02:27.270
Now the second type of cookies is duration-based cookie

61
00:02:27.270 --> 00:02:29.670
and it's a cookie generated by the load answer,

62
00:02:29.670 --> 00:02:32.670
and the name is AWSALB for the ALB

63
00:02:32.670 --> 00:02:35.100
and AWSELB for the CLB, okay?

64
00:02:35.100 --> 00:02:36.240
And the idea is this one,

65
00:02:36.240 --> 00:02:39.270
will have an expiry based on a specific duration,

66
00:02:39.270 --> 00:02:40.440
and the duration is generated

67
00:02:40.440 --> 00:02:42.300
by the load balancer itself, okay?

68
00:02:42.300 --> 00:02:44.570
Whereas before, while there is an application-based cookie,

69
00:02:44.570 --> 00:02:48.090
so the duration can be specified by the application itself.

70
00:02:48.090 --> 00:02:50.190
So that's how it works, okay?

71
00:02:50.190 --> 00:02:53.310
You don't need to remember exactly the name of the cookies

72
00:02:53.310 --> 00:02:55.740
or the fact that you have custom and application,

73
00:02:55.740 --> 00:02:58.170
but you remember there's application-based cookies

74
00:02:58.170 --> 00:03:01.110
and duration based, and they have a specific name.

75
00:03:01.110 --> 00:03:03.240
And this will be coming into account

76
00:03:03.240 --> 00:03:05.040
when we talk about CloudFront.

77
00:03:05.040 --> 00:03:07.500
Okay, so if I look at my load balancer right now

78
00:03:07.500 --> 00:03:09.090
and I open it in the new tab, as you can see,

79
00:03:09.090 --> 00:03:12.450
it goes between my three instances in my load answer.

80
00:03:12.450 --> 00:03:13.283
So that's perfect.

81
00:03:13.283 --> 00:03:15.630
But now I'm going to enable sticky sessions.

82
00:03:15.630 --> 00:03:18.270
So to do so, I'm going to go at the target group level,

83
00:03:18.270 --> 00:03:21.000
open my target group and then Action,

84
00:03:21.000 --> 00:03:24.570
and I will can edit the attributes of my target group.

85
00:03:24.570 --> 00:03:27.180
So here, let's scroll down

86
00:03:27.180 --> 00:03:30.960
and we have the target selection configuration,

87
00:03:30.960 --> 00:03:32.880
and here we have stickiness.

88
00:03:32.880 --> 00:03:36.120
So here for stickiness, we can turn it on.

89
00:03:36.120 --> 00:03:40.080
And we have two types of stickiness available to us.

90
00:03:40.080 --> 00:03:42.210
We have a load balancer generated cookie

91
00:03:42.210 --> 00:03:44.670
or the application based cookie.

92
00:03:44.670 --> 00:03:46.530
So let's look at the first one.

93
00:03:46.530 --> 00:03:48.630
So here we're able to set a duration.

94
00:03:48.630 --> 00:03:52.920
So between one second to seven days, you can modify it here.

95
00:03:52.920 --> 00:03:56.160
Or if you wanted to have your own application cookie,

96
00:03:56.160 --> 00:03:57.900
again, they are the same settings,

97
00:03:57.900 --> 00:03:59.940
but you need to add an app cookie name,

98
00:03:59.940 --> 00:04:02.187
for example, MYCUSTOMCOOKIEAPP.

99
00:04:04.920 --> 00:04:07.830
And this is just a name that you would give your cookie

100
00:04:07.830 --> 00:04:10.410
so that you know how to apply stickiness

101
00:04:10.410 --> 00:04:12.090
at the low balancer level.

102
00:04:12.090 --> 00:04:13.230
Now, to keep things simple,

103
00:04:13.230 --> 00:04:16.170
we're going to choose Load balancer generated cookie

104
00:04:16.170 --> 00:04:19.590
and have everything as the default, so one day.

105
00:04:19.590 --> 00:04:21.190
And let's click on Save changes.

106
00:04:22.770 --> 00:04:24.240
So now let's have a look.

107
00:04:24.240 --> 00:04:27.180
So I'm going to go and open the debugger as well,

108
00:04:27.180 --> 00:04:29.790
so we can have a look at the network and see what happens.

109
00:04:29.790 --> 00:04:31.320
So if you ever look at the network

110
00:04:31.320 --> 00:04:32.970
and then I refresh this page,

111
00:04:32.970 --> 00:04:35.553
as we can see, I refresh multiple times, okay?

112
00:04:36.570 --> 00:04:38.250
You get access to the same instance.

113
00:04:38.250 --> 00:04:41.940
So 7176 is the one that's coming back,

114
00:04:41.940 --> 00:04:43.500
back and back and back.

115
00:04:43.500 --> 00:04:44.970
And now what's going to happen

116
00:04:44.970 --> 00:04:47.220
is that when you look at the get request

117
00:04:47.220 --> 00:04:49.380
made to the load balancer.

118
00:04:49.380 --> 00:04:51.720
I'm very, very sorry for the font size here.

119
00:04:51.720 --> 00:04:53.370
I don't think I can really increase it.

120
00:04:53.370 --> 00:04:55.650
But if you go to Cookies, as you can see here,

121
00:04:55.650 --> 00:04:57.480
there is a response cookie, okay,

122
00:04:57.480 --> 00:05:00.780
that is saying that your cookie expires tomorrow.

123
00:05:00.780 --> 00:05:04.200
Here is the path and here is the value of the cookie.

124
00:05:04.200 --> 00:05:05.520
And then in the request cookie,

125
00:05:05.520 --> 00:05:07.950
when the browser makes a request to the load balancer,

126
00:05:07.950 --> 00:05:10.650
it sends again the cookie it has right here.

127
00:05:10.650 --> 00:05:13.860
And so because of the cookie being passed and sent,

128
00:05:13.860 --> 00:05:15.630
this is how stickiness works, okay?

129
00:05:15.630 --> 00:05:18.630
So just a little bit of a deeper dive

130
00:05:18.630 --> 00:05:20.160
into how stickiness works.

131
00:05:20.160 --> 00:05:21.840
But that's it for this lecture.

132
00:05:21.840 --> 00:05:22.740
I hope you liked it.

133
00:05:22.740 --> 00:05:27.720
And by the way, to access the web developer tools,

134
00:05:27.720 --> 00:05:30.360
you click on Web Developer and then Web Developer Tools.

135
00:05:30.360 --> 00:05:32.100
And I just use a short shortcut for that.

136
00:05:32.100 --> 00:05:33.630
And it's the same on Chrome and Firefox.

137
00:05:33.630 --> 00:05:34.800
And then you go into Network

138
00:05:34.800 --> 00:05:36.810
and you get access to your information

139
00:05:36.810 --> 00:05:38.340
around your request, okay?

140
00:05:38.340 --> 00:05:40.290
And finally, just go back to your target group,

141
00:05:40.290 --> 00:05:43.140
and then you edit the attributes itself

142
00:05:43.140 --> 00:05:44.790
and you can disable stickiness

143
00:05:44.790 --> 00:05:46.710
to come back to a normal behavior,

144
00:05:46.710 --> 00:05:47.820
which should be good to go.

145
00:05:47.820 --> 00:05:49.440
So that's it for this lecture, I hope you liked it.

146
00:05:49.440 --> 00:05:51.390
And I will see you in the next lecture.


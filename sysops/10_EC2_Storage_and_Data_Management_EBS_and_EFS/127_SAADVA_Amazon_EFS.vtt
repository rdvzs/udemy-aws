WEBVTT

1
00:00:00.120 --> 00:00:02.760
<v Stephane>Hi, and welcome to this lecture on Amazon EFS,</v>

2
00:00:02.760 --> 00:00:04.380
Elastic File System.

3
00:00:04.380 --> 00:00:08.970
So EFS is a managed NFS, which is a network file system.

4
00:00:08.970 --> 00:00:10.770
And because it's a network file system,

5
00:00:10.770 --> 00:00:14.010
it can be mounted on many EC2 instances,

6
00:00:14.010 --> 00:00:16.500
and these EC2 instances can also be

7
00:00:16.500 --> 00:00:19.050
in different availability zones,

8
00:00:19.050 --> 00:00:21.000
that's the whole power of EFS.

9
00:00:21.000 --> 00:00:22.170
So it's highly available,

10
00:00:22.170 --> 00:00:24.300
it's very scalable, it's expensive.

11
00:00:24.300 --> 00:00:28.170
It's about three times the cost of a GP2 EBS volume,

12
00:00:28.170 --> 00:00:29.160
and you pay per use

13
00:00:29.160 --> 00:00:31.620
so you don't have to provision capacity in advance.

14
00:00:31.620 --> 00:00:32.640
Let me explain.

15
00:00:32.640 --> 00:00:34.440
So you have your EFS file system

16
00:00:34.440 --> 00:00:36.600
and you surround it with a security group.

17
00:00:36.600 --> 00:00:39.720
And then you can have EC2 instances, many of them

18
00:00:39.720 --> 00:00:42.990
in the US east-1A availability zone for example,

19
00:00:42.990 --> 00:00:47.400
or EC2 instances in the US east-1B availability zone

20
00:00:47.400 --> 00:00:51.690
or US east-1C availability zones for your EC2 instances.

21
00:00:51.690 --> 00:00:54.120
And they can all connect at the same time

22
00:00:54.120 --> 00:00:58.470
to the same network file system through through EFS.

23
00:00:58.470 --> 00:01:01.620
So the use cases of EFS are content management,

24
00:01:01.620 --> 00:01:04.590
web serving, data sharing, WordPress.

25
00:01:04.590 --> 00:01:07.860
It uses internally the NFS protocol,

26
00:01:07.860 --> 00:01:10.410
and to control access to your EFS,

27
00:01:10.410 --> 00:01:13.110
you need to set up a security group.

28
00:01:13.110 --> 00:01:15.450
Now EFS, it's very important to note

29
00:01:15.450 --> 00:01:18.690
that it's only compatible with Linux-based AMI

30
00:01:18.690 --> 00:01:20.580
and not Windows.

31
00:01:20.580 --> 00:01:23.160
You can enable encryption at rest in your EFS drive

32
00:01:23.160 --> 00:01:27.240
using KMS, and it's a standard file system on Linux,

33
00:01:27.240 --> 00:01:32.220
so uses the POSIX system, and it has a standard file API.

34
00:01:32.220 --> 00:01:33.600
And the cool thing about EFS

35
00:01:33.600 --> 00:01:36.930
is that you don't need to plan the capacity in advance.

36
00:01:36.930 --> 00:01:39.270
The file system will scale automatically,

37
00:01:39.270 --> 00:01:40.620
and it's pay-per-use

38
00:01:40.620 --> 00:01:44.190
for each gigabyte of data you use in EFS.

39
00:01:44.190 --> 00:01:47.370
Then we have different performance and storage classes.

40
00:01:47.370 --> 00:01:49.590
So first, the scale about EFS.

41
00:01:49.590 --> 00:01:51.780
You get thousands of concurrent NFS clients

42
00:01:51.780 --> 00:01:54.510
and 10 gigabytes plus of throughput,

43
00:01:54.510 --> 00:01:56.640
and you can grow to a petabyte scale

44
00:01:56.640 --> 00:02:00.090
network file system automatically, which is really nice.

45
00:02:00.090 --> 00:02:02.040
You can also set the performance mode

46
00:02:02.040 --> 00:02:05.130
at the EFS network file system creation time,

47
00:02:05.130 --> 00:02:06.240
and you have several options.

48
00:02:06.240 --> 00:02:09.390
The first one is general purpose, which is the default.

49
00:02:09.390 --> 00:02:11.940
It's used for latency sensitive use cases

50
00:02:11.940 --> 00:02:14.760
such as a web server, a CMS, et cetera.

51
00:02:14.760 --> 00:02:18.300
But if you wanted to maximize throughput, you have max I/O,

52
00:02:18.300 --> 00:02:21.120
which is a high latency kind of network file system,

53
00:02:21.120 --> 00:02:24.180
but higher throughput and it's highly parallel.

54
00:02:24.180 --> 00:02:26.730
So it's great if you have big data applications

55
00:02:26.730 --> 00:02:29.070
or media processing needs.

56
00:02:29.070 --> 00:02:31.350
Now, throughput mode, you have different options.

57
00:02:31.350 --> 00:02:32.790
The first one is bursting.

58
00:02:32.790 --> 00:02:35.010
So you have one terabyte,

59
00:02:35.010 --> 00:02:36.840
means that it's 50 megabytes per second

60
00:02:36.840 --> 00:02:40.140
plus burst of to 100 megabytes per second,

61
00:02:40.140 --> 00:02:42.030
so that's the kind of bursting you get.

62
00:02:42.030 --> 00:02:43.440
You don't have to remember the numbers,

63
00:02:43.440 --> 00:02:44.970
but just to give you an idea.

64
00:02:44.970 --> 00:02:47.760
Provisioned is when you want to set your throughput

65
00:02:47.760 --> 00:02:49.410
regardless of your storage size.

66
00:02:49.410 --> 00:02:52.710
So the previous one was growing in throughput

67
00:02:52.710 --> 00:02:55.170
as we have more storage, but with provisions

68
00:02:55.170 --> 00:02:57.150
you can have one gigabyte per second

69
00:02:57.150 --> 00:02:58.590
for one terabyte of storage.

70
00:02:58.590 --> 00:03:02.010
That is fine because you have decorrelated

71
00:03:02.010 --> 00:03:04.380
your throughput from your storage.

72
00:03:04.380 --> 00:03:06.690
And finally, to make things a little bit simpler,

73
00:03:06.690 --> 00:03:09.510
you have elastic to automatically scale the throughput

74
00:03:09.510 --> 00:03:12.120
up and down based on your workload.

75
00:03:12.120 --> 00:03:13.170
So for example,

76
00:03:13.170 --> 00:03:16.050
you can get up to three gigabytes per second for reads

77
00:03:16.050 --> 00:03:18.360
and one gigabyte per second for writes

78
00:03:18.360 --> 00:03:20.400
based on your workload,

79
00:03:20.400 --> 00:03:22.320
and this is going to be a great fit

80
00:03:22.320 --> 00:03:24.573
when you have unpredictable workloads.

81
00:03:25.410 --> 00:03:27.660
Now for storage classes we have several options.

82
00:03:27.660 --> 00:03:28.710
We have storage tiers,

83
00:03:28.710 --> 00:03:31.260
which is a lifecycle management feature

84
00:03:31.260 --> 00:03:33.960
to allow you to move files to different storage tiers

85
00:03:33.960 --> 00:03:36.810
after a certain number of days.

86
00:03:36.810 --> 00:03:38.520
So you have the standard tier

87
00:03:38.520 --> 00:03:41.160
which is used for frequently accessed files,

88
00:03:41.160 --> 00:03:45.840
and then you have the EFS-IA tier for infrequent access,

89
00:03:45.840 --> 00:03:48.332
which gives you a cost to retrieve files

90
00:03:48.332 --> 00:03:52.020
but a lower price to store these files.

91
00:03:52.020 --> 00:03:54.810
And then you have the archive storage tier.

92
00:03:54.810 --> 00:03:57.420
This is for rarely accessed data, so you only access,

93
00:03:57.420 --> 00:03:59.490
for example, data a few times a year,

94
00:03:59.490 --> 00:04:01.710
which is going to be a lot cheaper

95
00:04:01.710 --> 00:04:03.990
to store the data on that tier.

96
00:04:03.990 --> 00:04:08.160
To move your files automatically between your storage tiers,

97
00:04:08.160 --> 00:04:10.770
you can implement lifecycle policies,

98
00:04:10.770 --> 00:04:12.420
which will allow you define after how many days

99
00:04:12.420 --> 00:04:14.550
a file should be moved to which tier.

100
00:04:14.550 --> 00:04:17.494
So here's an example in which we have files in EFS standard,

101
00:04:17.494 --> 00:04:20.790
and one of these files hasn't been accessed for 60 days.

102
00:04:20.790 --> 00:04:23.670
Then by setting up the right lifecycle policy,

103
00:04:23.670 --> 00:04:28.500
we can move it to a new storage tier such as EFS-IA.

104
00:04:28.500 --> 00:04:31.620
Now, in terms of availability and durability,

105
00:04:31.620 --> 00:04:33.540
standard is going to be great

106
00:04:33.540 --> 00:04:35.730
when you have a multi-AZ setup,

107
00:04:35.730 --> 00:04:38.880
so your EFS across multiple availability zones,

108
00:04:38.880 --> 00:04:42.030
which is great for your production workloads

109
00:04:42.030 --> 00:04:44.970
so that you're resistant to disasters.

110
00:04:44.970 --> 00:04:47.340
But if you just want to do development

111
00:04:47.340 --> 00:04:50.940
and want to have cheaper options, then you choose one zone,

112
00:04:50.940 --> 00:04:54.180
which is going to give you only one availability zone,

113
00:04:54.180 --> 00:04:56.370
and you will still have backups on it,

114
00:04:56.370 --> 00:05:00.630
and it's also compatible with the IA type of storage tier.

115
00:05:00.630 --> 00:05:05.160
So you have the EFS one zone-IA type of option.

116
00:05:05.160 --> 00:05:08.940
Overall, by using the right EFS storage classes,

117
00:05:08.940 --> 00:05:11.580
you can do up to 90% in cost savings,

118
00:05:11.580 --> 00:05:13.410
so this is very helpful.

119
00:05:13.410 --> 00:05:15.540
So that's it for this lecture, I hope you liked it,

120
00:05:15.540 --> 00:05:17.763
and I will see you in the next lecture.

